import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { TankStackProvider } from "@/components/providers/tankstack-provider";
import { AuthProvider } from "@/components/providers/auth-provider";
import { Toaster } from "sonner";
import { cookies } from "next/headers";
import { getCurrentUser } from "@/services/users.service";
import { Montserrat } from "next/font/google";
import { getPloliesMe } from "@/services/policy.service";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const montserrat = Montserrat({
  weight: ["500", "700"],
  style: ["normal", "italic"],
  subsets: ["latin"],
  display: "swap",
});

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const allCookie = cookies()
    .getAll()
    .map((c) => `${c.name}=${encodeURIComponent(c.value)}`)
    .join("; ");

  const user = await getCurrentUser({
    headers: {
      Cookie: allCookie,
    },
  });

  const policies = await getPloliesMe({
    headers: {
      Cookie: allCookie,
    },
  });

  console.log(policies);

  return (
    <html lang="en">
      <body
        // className={`${roboto.className} ${geistMono.variable}  antialiased`}
        className={`${montserrat.className} antialiased bg-transparent`}
      >
        <TankStackProvider>
          {/* <SocketManagerProvider
            uri={envs.NEXT_PUBLIC_WS_SERVER_URL}
            opts={{
              reconnectionAttempts: 20,
              reconnectionDelay: 3000,
              autoConnect: false,
            }}
          > */}
          <AuthProvider initUser={user} initPolicies={policies}>
            {children}
          </AuthProvider>
          {/* </SocketManagerProvider> */}
          <Toaster visibleToasts={5} richColors />
        </TankStackProvider>
      </body>
    </html>
  );
}
