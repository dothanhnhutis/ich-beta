generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DISABLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Users {
  id                       String           @id @default(uuid())
  email                    String           @unique
  emailVerified            Boolean          @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?          @unique
  password                 String?
  passwordResetToken       String?          @unique
  passwordResetExpires     DateTime? //4h
  reActiveToken            String?          @unique
  reActiveExpires          DateTime? //4h
  status                   UserStatus       @default(ACTIVE)
  username                 String
  gender                   Gender?
  picture                  String?
  birthDate                String?
  phoneNumber              String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  mfa                      MFA?
  oauthProviders           OauthProviders[]
}

model OauthProviders {
  providerId String
  provider   String
  userId     String
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, provider, providerId])
}

model MFA {
  userId     String
  secretKey  String
  lastAccess DateTime @updatedAt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
}

model Factorys {
  id          String        @id @default(uuid())
  name        String
  address     String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  departments Departments[]

  @@index([name, address])
}

model Departments {
  id                  String                @id @default(uuid())
  name                String
  factoryId           String
  factory             Factorys              @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  departmentsDisplays DepartmentsDisplays[]

  @@unique([factoryId, name])
  @@index([name, factoryId])
}

model DepartmentsDisplays {
  departmentId String
  displayId    String
  department   Departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  display      Displays    @relation(fields: [displayId], references: [id], onDelete: Cascade)

  @@id([departmentId, displayId])
}

model Displays {
  id                  String                @id @default(uuid())
  content             String
  enable              Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  departmentsDisplays DepartmentsDisplays[]

  @@index([enable])
}

model Plans {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Tasks[]
}

enum TaskProgress {
  TO_DO
  ON_PROGRESS
  IN_REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  NORMAL
  URGENT
}

model Tasks {
  id        String       @id @default(uuid())
  title     String
  subTitle  String
  priority  TaskPriority @default(NORMAL)
  progress  TaskProgress @default(ON_PROGRESS)
  plan      Plans        @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId    String
  closeTask Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  subTasks  SubTasks[]

  @@index([title, progress, priority, closeTask])
}

enum SubTasksStatus {
  ASSIGNED
  ACCEPTED
  REJECTED
}

model SubTasks {
  id           String         @id @default(uuid())
  title        String         @default("")
  parentTask   Tasks          @relation(fields: [parentTaskId], references: [id], onDelete: Cascade)
  parentTaskId String
  status       SubTasksStatus @default(ASSIGNED)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([title, parentTaskId])
}
