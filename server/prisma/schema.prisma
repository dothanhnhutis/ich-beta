generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User 
enum UserStatus {
  ACTIVE
  SUSPENDED
  DISABLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Users {
  id                       String           @id @default(uuid())
  email                    String           @unique
  emailVerified            Boolean          @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?          @unique
  password                 String?
  passwordResetToken       String?          @unique
  passwordResetExpires     DateTime? //4h
  reActiveToken            String?          @unique
  reActiveExpires          DateTime? //4h
  status                   UserStatus       @default(ACTIVE)
  username                 String
  gender                   Gender?
  picture                  String?
  birthDate                String?
  phoneNumber              String?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  mfa                      MFA?
  oauthProviders           OauthProviders[]
  displays                 Displays[]
  usersRoles               UsersRoles[]
  images                   Images[]
  products                 Products[]
}

model OauthProviders {
  providerId String
  provider   String
  userId     String
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, provider, providerId])
}

model MFA {
  userId     String
  secretKey  String
  lastAccess DateTime @updatedAt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
}

// Role
model UsersRoles {
  userId    String
  roleId    String
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model Roles {
  id          String       @id @default(uuid())
  name        String
  permissions String[]     @default([])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  usersRoles  UsersRoles[]
}

// Display TV
model Factorys {
  id          String        @id @default(uuid())
  name        String
  address     String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  departments Departments[]

  @@index([name, address])
}

model Departments {
  id                  String                @id @default(uuid())
  name                String
  factoryId           String
  factory             Factorys              @relation(fields: [factoryId], references: [id], onDelete: Cascade)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  departmentsDisplays DepartmentsDisplays[]

  @@unique([factoryId, name])
  @@index([name, factoryId])
}

model DepartmentsDisplays {
  departmentId String
  displayId    String
  department   Departments @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  display      Displays    @relation(fields: [displayId], references: [id], onDelete: Cascade)

  @@id([departmentId, displayId])
}

model Displays {
  id                  String                @id @default(uuid())
  content             String
  enable              Boolean               @default(true)
  priority            Int                   @default(0)
  userId              String
  createdBy           Users                 @relation(fields: [userId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  departmentsDisplays DepartmentsDisplays[]

  @@index([enable, userId])
}

model Products {
  id               String          @id @default(uuid())
  name             String
  images           String[]        @default([])
  innerBoxQuantity Int             @default(0)
  userId           String
  user             Users           @relation(fields: [userId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  productImages    ProductImages[]

  @@index([name])
}

model ProductImages {
  productId String
  imageId   String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  image     Images   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([productId, imageId])
}

model Images {
  id            String          @id @default(uuid())
  url           String
  name          String
  altText       String          @default("")
  uploadedAt    DateTime        @default(now())
  size          Int
  format        String
  userId        String
  user          Users           @relation(fields: [userId], references: [id])
  productImages ProductImages[]

  @@index([url, name])
}

// model Plans {
//   id        String   @id @default(uuid())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   tasks     Tasks[]
// }

// enum TaskProgress {
//   TO_DO
//   ON_PROGRESS
//   IN_REVIEW
//   COMPLETED
// }

// enum TaskPriority {
//   LOW
//   NORMAL
//   URGENT
// }

// model Tasks {
//   id        String       @id @default(uuid())
//   title     String
//   subTitle  String
//   priority  TaskPriority @default(NORMAL)
//   progress  TaskProgress @default(ON_PROGRESS)
//   plan      Plans        @relation(fields: [planId], references: [id], onDelete: Cascade)
//   planId    String
//   closeTask Boolean      @default(false)
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
//   subTasks  SubTasks[]

//   @@index([title, progress, priority, closeTask])
// }

// enum SubTasksStatus {
//   ASSIGNED
//   ACCEPTED
//   REJECTED
// }

// model SubTasks {
//   id           String         @id @default(uuid())
//   title        String         @default("")
//   parentTask   Tasks          @relation(fields: [parentTaskId], references: [id], onDelete: Cascade)
//   parentTaskId String
//   status       SubTasksStatus @default(ASSIGNED)
//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt

//   @@index([title, parentTaskId])
// }
