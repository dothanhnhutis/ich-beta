generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User 
enum UserStatusEnum {
  ACTIVE
  SUSPENDED
  DISABLED
}

enum GenderEnum {
  MALE
  FEMALE
  OTHER
}

model User {
  id                       String          @id @default(uuid())
  email                    String          @unique
  emailVerified            Boolean         @default(false)
  emailVerificationExpires DateTime? //24h
  emailVerificationToken   String?         @unique
  password                 String?
  passwordResetToken       String?         @unique
  passwordResetExpires     DateTime? //4h
  reActiveToken            String?         @unique
  reActiveExpires          DateTime? //4h
  status                   UserStatusEnum  @default(ACTIVE)
  username                 String
  gender                   GenderEnum?
  picture                  String?
  birthDate                String?
  phoneNumber              String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  mfa                      MFA?
  oauthProviders           OauthProvider[]
  displays                 Display[]
  alarms                   Alarm[]
  timers                   Timers[]
  userRoles                UserRole[]
  images                   Image[]
  products                 Products[]
}

model OauthProvider {
  providerId String
  provider   String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, provider, providerId])
}

model MFA {
  userId     String
  secretKey  String
  lastAccess DateTime @updatedAt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId])
}

// Role
model UserRole {
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model Role {
  id          String     @id @default(uuid())
  name        String
  permissions String[]   @default([])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]
}

// Facility
enum LocationTypeEnum {
  Factory
  Warehouse
}

model Location {
  id        String           @id @default(uuid())
  name      String
  address   String
  type      LocationTypeEnum
  rooms     Room[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([name, address])
}

model Room {
  id           String        @id @default(uuid())
  name         String
  locationId   String
  location     Location      @relation(fields: [locationId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  roomDisplays RoomDisplay[]
  roomAlarms   RoomAlarm[]
  roomTimers   RoomTimer[]

  @@unique([locationId, name])
  @@index([name, locationId])
}

// TV Display
model RoomDisplay {
  roomId     String
  displayId  String
  department Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  display    Display @relation(fields: [displayId], references: [id], onDelete: Cascade)

  @@id([roomId, displayId])
}

model Display {
  id           String        @id @default(uuid())
  content      String
  enable       Boolean       @default(true)
  priority     Int           @default(0)
  userId       String
  createdBy    User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  roomDisplays RoomDisplay[]

  @@index([enable, userId])
}

// Clock 
model RoomAlarm {
  roomId  String
  alarmId String
  room    Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  alarm   Alarm  @relation(fields: [alarmId], references: [id], onDelete: Cascade)

  @@id([roomId, alarmId])
}

model Alarm {
  id         String      @id @default(uuid())
  time       String //HH:mm
  label      String      @default("")
  enable     Boolean     @default(true)
  repeat     String[]    @default([])
  userId     String
  createdBy  User        @relation(fields: [userId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  roomAlarms RoomAlarm[]
}

model RoomTimer {
  roomId  String
  timerId String
  room    Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  timer   Timers @relation(fields: [timerId], references: [id], onDelete: Cascade)

  @@id([roomId, timerId])
}

model Timers {
  id            String      @id @default(uuid())
  time          String //HH:mm:ss
  remainingTime Int? //(milliseconds)
  label         String      @default("")
  status        String      @default("running") // pause | running 
  createdAt     DateTime    @default(now())
  userId        String
  createdBy     User        @relation(fields: [userId], references: [id])
  roomTimers    RoomTimer[]
}

// Product
model Products {
  id               String         @id @default(uuid())
  name             String
  images           String[]       @default([])
  innerBoxQuantity Int            @default(0)
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  productImages    ProductImage[]

  @@index([name])
}

model ProductImage {
  productId String
  imageId   String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@id([productId, imageId])
}

model Image {
  id            String         @id @default(uuid())
  url           String
  name          String
  altText       String         @default("")
  uploadedAt    DateTime       @default(now())
  size          Int
  format        String
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  productImages ProductImage[]

  @@index([url, name])
}

// model Plans {
//   id        String   @id @default(uuid())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   tasks     Tasks[]
// }

// enum TaskProgress {
//   TO_DO
//   ON_PROGRESS
//   IN_REVIEW
//   COMPLETED
// }

// enum TaskPriority {
//   LOW
//   NORMAL
//   URGENT
// }

// model Tasks {
//   id        String       @id @default(uuid())
//   title     String
//   subTitle  String
//   priority  TaskPriority @default(NORMAL)
//   progress  TaskProgress @default(ON_PROGRESS)
//   plan      Plans        @relation(fields: [planId], references: [id], onDelete: Cascade)
//   planId    String
//   closeTask Boolean      @default(false)
//   createdAt DateTime     @default(now())
//   updatedAt DateTime     @updatedAt
//   subTasks  SubTasks[]

//   @@index([title, progress, priority, closeTask])
// }

// enum SubTasksStatus {
//   ASSIGNED
//   ACCEPTED
//   REJECTED
// }

// model SubTasks {
//   id           String         @id @default(uuid())
//   title        String         @default("")
//   parentTask   Tasks          @relation(fields: [parentTaskId], references: [id], onDelete: Cascade)
//   parentTaskId String
//   status       SubTasksStatus @default(ASSIGNED)
//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt

//   @@index([title, parentTaskId])
// }
